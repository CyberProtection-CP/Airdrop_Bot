import json
import random
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, filters, CallbackQueryHandler
)

TOKEN = "7645340647:AAEVYTWHYCZhhQfd1QVlouL>
CHANNELS = [
    "-1002271283410", 
    "-1002476961589",  
]
DATA_FILE = "database.json"
PHOTO_PATH = "airdrop_image.jpg"

# ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶ú ‡¶≤‡ßã‡¶°/‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶ü
try:
    with open(DATA_FILE, "r") as f:
        db = json.load(f)
except:
    db = {}

def save_db():
    with open(DATA_FILE, "w") as f:
        json.dump(db, f, indent=4)

def get_user_data(user_id):
    uid = str(user_id)
    if uid not in db:
        db[uid] = {
            "points": 0,
            "referrals": [],
            "verified": False,
            "inviter": None,
            "withdraw_info": None,
            "joined": False
        }
    return db[uid]

def generate_puzzle():
    a, b = random.randint(1, 9), random.randint(1, 9)
    return f"{a} + {b} = ?", a + b

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_data = get_user_data(user.id)

    if user_data["verified"]:
        await send_airdrop_intro(update, context)
        return

    if context.args:
        referrer_id = context.args[0]
        if str(referrer_id) != str(user.id):
            user_data["inviter"] = referrer_id

    question, answer = generate_puzzle()
    context.user_data["answer"] = answer
    await update.message.reply_text(
        f"ü§ñ  Human Verification Question: {question}\n Just write your answer:"
    )

async def puzzle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_data = get_user_data(user.id)

    if user_data["verified"] or "answer" not in context.user_data:
        return

    try:
        user_answer = int(update.message.text)
        correct_answer = context.user_data["answer"]

        if user_answer == correct_answer:
            user_data["verified"] = True
            save_db()
            await update.message.reply_text("‚úÖ ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‡¶ì‡¶Ø‡¶º‡ßá‡¶≤‡¶ï‡¶æ‡¶Æ‡¶ø‡¶Ç ‡¶™‡ßã‡¶∏‡ßç‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
            await send_airdrop_intro(update, context)
        else:
            await update.message.reply_text("‚ùå ‡¶≠‡ßÅ‡¶≤ ‡¶â‡¶§‡ßç‡¶§‡¶∞! ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶® /start ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá‡•§")
    except:
        await update.message.reply_text("‚ö†Ô∏è ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡ßü ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶®‡•§")

async def send_airdrop_intro(update: Update, context: ContextTypes.DEFAULT_TYPE):

    caption = (
    "üî• *Airdrop Fire* ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!\n"
    "üí∞ ‡¶™‡ßÅ‡¶∞‡¶∏‡ßç‡¶ï‡¶æ‡¶∞ ‡¶™‡ßÅ‡¶≤: ‡ßß‡ß¶,‡ß¶‡ß¶‡ß¶ USDT\n"
    "üëâ ‡¶Ö‡¶Ç‡¶∂‡¶ó‡ßç‡¶∞‡¶π‡¶£‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶á ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®:\n"
    "https://t.me/addlist/6zWj45KzQFUwMmVl\n\n"
    "‚úÖ ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡¶¨ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶π‡¶Ø‡¶º‡ßá ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ö‡¶æ‡¶™‡ßÅ‡¶®‡•§"
)

keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("‚úÖ ‡¶Ü‡¶Æ‡¶ø ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø", callback_data="joined")]
])

    try:
        with open(PHOTO_PATH, "rb") as photo:
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=photo,
                caption=caption,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
    except Exception as e:
        print(f"‚ùå Photo sending error: {e}")
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=caption + "\n\n‚ö†Ô∏è [‡¶õ‡¶¨‡¶ø ‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡¶®‡¶ø, ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá]",
            parse_mode="Markdown",
            reply_markup=keyboard
        )

async def handle_joined(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    user_data = get_user_data(user_id)

    if user_data.get("joined"):
        await query.answer("‚úÖ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶á‡¶§‡ßã‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡¶á ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§", show_alert=True)
        return

    for channel_id in CHANNELS:
        try:
            member = await context.bot.get_chat_member(channel_id, user_id)
            if member.status not in ["member" "administrator", "creator"]:
                await query.answer("‚ùå ‡¶è‡¶ñ‡¶®‡ßã ‡¶∏‡¶¨ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶®‡¶®‡¶ø!", show_alert=True)
                return
        except Exception as e:
            print(f"Channel check error: {e}")
            await query.answer("‚ö†Ô∏è ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§", show_alert=True)
            return

    if user_data["inviter"]:
        inviter_data = get_user_data(user_data["inviter"])
        if user_id not in inviter_data["referrals"]:
            inviter_data["referrals"].append(user_id)
            inviter_data["points"] += 5
            await context.bot.send_message(
                chat_id=user_data["inviter"],
                text=f"üéâ ‡¶®‡¶§‡ßÅ‡¶® ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤! ‡ß´ ‡¶ï‡¶Ø‡¶º‡ßá‡¶® ‡¶™‡ßá‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡¶®‡•§ ‡¶Æ‡ßã‡¶ü: {inviter_data['points']}"
            )

    user_data["points"] += 5
    user_data["joined"] = True
    save_db()

    await query.answer()

    try:
        await query.message.delete()
    except Exception as e:
        print(f"Couldn't delete message: {e}")

    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text="‚úÖ ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶! ‡¶Ü‡¶™‡¶®‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§ ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶ø ‡¶∞‡ßá‡¶´‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶® /refer ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá‡•§"
    )

async def refer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_data = get_user_data(user.id)
    link = f"https://t.me/{context.bot.username}?start={user.id}"
    await update.message.reply_text(
        f"üîó ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï:\n{link}\nüë• ‡¶∞‡ßá‡¶´‡¶æ‡¶∞: {len(user_data['referrals'])}\nüí∏ ‡¶ï‡¶Ø‡¶º‡ßá‡¶®: {user_data['points']}"
    )

async def withdraw(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_data = get_user_data(user.id)

    if user_data["points"] < 300:
        await update.message.reply_text("‚ùå ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶≤‡ßá ‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡ß©‡ß¶‡ß¶ ‡¶ï‡¶Ø‡¶º‡ßá‡¶® ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá‡•§")
        return

    await update.message.reply_text("‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ø‡¶ï‡¶æ‡¶∂/‡¶®‡¶ó‡¶¶ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶™‡¶æ‡¶†‡¶æ‡¶® (‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: 01xxxxxxxxx):")
    context.user_data["awaiting_withdraw_number"] = True

async def handle_withdraw_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_withdraw_number"):
        number = update.message.text.strip()
        if not re.match(r"^01\d{9}$", number):
            await update.message.reply_text("‚ö†Ô∏è ‡¶∏‡¶†‡¶ø‡¶ï ‡ßß‡ßß-‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶® (‡ß¶‡ßß ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ)‡•§")
            return

        user_data = get_user_data(update.effective_user.id)
        user_data["withdraw_info"] = number
        save_db()

        await update.message.reply_text(
            f"‚úÖ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶®‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!\n‡¶¨‡¶ø‡¶ï‡¶æ‡¶∂/‡¶®‡¶ó‡¶¶: {number}\n‚ö†Ô∏è ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶¨‡ßá‡•§"
        )
        context.user_data["awaiting_withdraw_number"] = False

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚öôÔ∏è ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶∏‡¶Æ‡ßÇ‡¶π:\n/start - ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®\n/refer - ‡¶∞‡ßá‡¶´‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï\n/withdraw - ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞\n/help - ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ"
    )

async def text_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_withdraw_number"):
        await handle_withdraw_number(update, context)
    elif "answer" in context.user_data:
        await puzzle_answer(update, context)
    else:
        await update.message.reply_text("‚ö†Ô∏è ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá /start ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

if name == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("refer", refer))
    app.add_handler(CommandHandler("withdraw", withdraw))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CallbackQueryHandler(handle_joined, pattern="^joined$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_router))

    print("ü§ñ Bot is running...")
    app.run_polling()
